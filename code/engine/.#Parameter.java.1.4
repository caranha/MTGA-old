package engine;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.util.Vector;

/* Parameter Class
 * This is a generic class for parameter file parsing. 
 * The class should read a file, and then return
 * parameters given stringnames upon request.
 * 
 * The format for parameters is 
 * Parametername = (string) Value
 * or 
 * # comment
 * 
 * This class does not store default parameters. This is up 
 * for the individual classes it serves.
 */

/**
 * @author caranha
 *
 */
public class Parameter {
	
	private static Parameter instance;
	
	Vector<String> value; //contain the values of stored parameters
	Vector<String> name; // contain the names of stored parameters
	
	protected Parameter() 
	{
		value = new Vector<String>();
		name = new Vector<String>();
	}
	
	public static synchronized Parameter getInstance() 
	{
		if(instance == null) {
			instance = new Parameter();
	      }	
		return instance;
	}	
	
	
	
	/* Clears all parameters */
	public void clear()
	{
		name.clear();
		value.clear();
	}
	
	/* Loads a new set of parameters. 
	 * The new parameters are loaded in addition to any existing parameters
	 * Parameters with identical names are overwritten
	 * 
	 * Parameters must be in the format:
	 * PARAMETER_NAME = PARAMETER_VALUE
	 * 
	 * Where PARAMETER value is a string. The value ends at a #
	 * Character (which indicates comments). The value is trimmed.
	 * 
	 * Lines starting with # will be ignored
	 * 
	 */
	public void load(String filename) throws Exception
	{
		
		
    	BufferedReader reader;
    	String line = null;
    	 	
    	reader = 
    		new BufferedReader(new FileReader(new File(filename)));

    	while ((line = reader.readLine()) != null) 
    	{
    		
    		if (line.length() > 0 && line.charAt(0) != '#') // ignores comments
    		{	
    			String[] input = line.split("=");
    			
    			input[0] = input[0].trim();
    			input[0] = input[0].toLowerCase();
    				
    			String paramval;
    			int 	clone = name.indexOf(input[0]);
    			try {
    				paramval = input[1].split("#")[0].trim();
    			} catch (Exception e)
    			{
    				paramval = null;
    				System.err.println("Error reading parameter file " + e.getMessage() + ". Ignoring line:");
    				System.err.println("   \"" + line + "\"");    					
    			}

    			if (paramval != null)
    			{
    				if (clone == -1) // parameter hasn't been specified yet
    				{
    				
    					if (paramval != null) // ignore invalid parameters
    					{
    						name.add(input[0]);
    						value.add(paramval);
    					}
    				}
    				else
    				{
    					value.set(clone, paramval);
    				}
    			}	
    		
    		}
    	}
    	
    	reader.close();
	}
	
	/* Sets a new parameter, or change the value of an old one */
	public void setParam(String n, String v)
	{
		n = n.trim();
		n = n.toLowerCase();
		
		int index = name.indexOf(n);
		
		if (index == -1)
		{
			name.add(n);
			value.add(v);
		}
		else
		{
			value.set(index, v);
		}
	}
	
	/* Returns a parameter of the given name. 
	 * If no parameter of that name exists, returns null
	 */
	public String getParam(String x)
	{		
		x = x.trim();
		x = x.toLowerCase();
		
		int index = name.indexOf(x);
		if (index == -1) //there is no such parameter
		{
			return null;
		}
		else
			return value.get(index);
	}
	
	/* Debug function: Print all the parameters in the object */
	public void debugPrintContents()
	{
		System.err.println("Parameter Values for object " + this );
		for (int i = 0; i < name.size(); i++)
		{
			System.err.println(name.get(i) + " " + value.get(i));
		} 
	}
	
}
